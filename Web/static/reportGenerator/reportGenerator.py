from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, PageBreak, PageTemplate, Frame
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from datetime import datetime

# Get the current local date and time and format it
current_datetime = datetime.now()
current_date = current_datetime.date()
current_time = current_datetime.time()
formatted_time = current_time.strftime("%H.%M.%S")


# Function for the diagnosis result for the patient for different diseases
def diagnosis_result(disease_type):
    if disease_type == "Brain Tumor":
        if disease_type == "Meningioma":
            return "Patient is diagnosed with Meningioma"
        elif disease_type == "Glioma":
            return "Patient is diagnosed with Glioma"
        elif disease_type == "Pituitary Tumor":
            return "Patient is diagnosed with Pituitary Tumor"
        else:
            return "Patient is diagnosed with Brain Tumor"
    elif disease_type == "Ischemic Stroke":
        return "Patient is diagnosed with Ischemic Stroke"
    elif disease_type == "Alzheimer's Disease":
        return "Patient is diagnosed with Alzheimer's Disease"
    else:
        return "Diagnosis result for the patient couldn't be found."


# Report data
user_name = "Uzman Arfan"
email = "seyeduzman@gmail.com"
disease_type = ""
diagnosis = diagnosis_result(disease_type)
disclaimer = ("**The report is generated by the AI model and the results are not 100% accurate. "
              "Please consult a doctor for further diagnosis.**")
input_Image = "img.png"


# Create a PDF document
pdf_filename = "Cranium Cryptics diagnosis_report_" + user_name + "_" + formatted_time + ".pdf"

# Set the margins for the PDF document
left_margin = 36
right_margin = 36
top_margin = 36
bottom_margin = 36

document = SimpleDocTemplate(pdf_filename, pagesize=A4, leftMargin=left_margin * 2, rightMargin=right_margin * 2,
                             topMargin=top_margin * 2, bottomMargin=bottom_margin * 2)


# Function to add a border around the entire page
def add_border(canvas, doc):
    canvas.setStrokeColorRGB(255, 255, 255)  # Set border color (white)
    canvas.rect(left_margin, bottom_margin, A4[0] - left_margin - right_margin, A4[1] - bottom_margin - top_margin)


# Create a frame for the entire page
frame = Frame(left_margin, bottom_margin, A4[0] - left_margin - right_margin, A4[1] - bottom_margin - top_margin)

# Attach the border-drawing function to the 'afterPage' event of the canvas
document.addPageTemplates([PageTemplate(id='Border', frames=frame, onPage=add_border)])


# Styles for the document
styles = getSampleStyleSheet()

# Custom styles for the report
header_style = ParagraphStyle('Header', parent=styles['Title'], textColor=colors.black, fontSize=10, alignment=0)
title_style = ParagraphStyle('Title', parent=styles['Title'], fontSize=24, spaceAfter=12)
subtitle_style = ParagraphStyle('Subtitle', parent=styles['Title'], fontSize=14, textColor=colors.black, alignment=0)
line_style = ParagraphStyle('Line', parent=styles['Title'], fontSize=20, textColor=colors.black,)
body_style = ParagraphStyle('BodyText', parent=styles['BodyText'], spaceAfter=12)
footer_style = ParagraphStyle('BodyText', parent=styles['BodyText'], textColor=colors.red, fontSize=10, spaceAfter=12)

# Content to be added to the PDF
content = []

# Add header content
header_date = current_datetime.strftime("%d-%m-%Y")     # Format the date as DD-MM-YYYY
header_time = current_datetime.strftime("%H:%M")    # Format the time as HH:MM
webApplication_logo_path = "reportLogo.png"     # Replace with your logo path

uploaded_image = Image(input_Image, width=250, height=250)

# Define your data
header_table_data = [
    [Paragraph("", styles['Normal']),  # Empty cell for offset
     Image(webApplication_logo_path, width=120, height=120),
     Paragraph(f"User Name: {user_name}<br/>"
               f"Email: {email}"
               f"<br/>Date: {header_date}"
               f"<br/>Time: {header_time}", header_style)],
]

# Set different column widths for the offset, image, and text
col_widths = [15, 300, 170]  # Width for the offset, column containing the image, and column containing the text

# Create the table with specified column widths
header_table = Table(header_table_data, colWidths=col_widths)

# Add the table to the content
content.append(header_table)


# Add body content
body_content = [
    Paragraph("---------------------------------------------------------------------------", line_style),
    Spacer(1, 12),
    Paragraph("Diagnosis Report", title_style),
    Spacer(1, 15),
    uploaded_image,
    Spacer(1, 40),
    Paragraph(f"Diagnosis Results: {diagnosis}", subtitle_style),
    Spacer(10, 140),
    # Paragraph(disclaimer, body_style),
]
content.extend(body_content)

# Add section line
# Add footer content
footer_content = [
    Paragraph("---------------------------------------------------------------------------", line_style),
    Spacer(1, 4),
    Paragraph(disclaimer, footer_style),  # Replace with your footer content
]
content.extend(footer_content)

# Build the PDF document
document.build(content)
